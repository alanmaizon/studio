// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A personalized plant recommendation AI agent.
 *
 * - plantRecommendation - A function that handles the plant recommendation process.
 * - PlantRecommendationInput - The input type for the plantRecommendation function.
 * - PlantRecommendationOutput - The return type for the plantRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PlantRecommendationInputSchema = z.object({
  climate: z
    .string()
    .describe('The local climate, e.g., temperate, tropical, desert.'),
  lightLevel: z
    .string()
    .describe(
      'The amount of light in the home, e.g., low, medium, high, direct sunlight.'
    ),
  preferences: z
    .string()
    .describe('The user personal preferences, e.g., colors, size, type.'),
});

export type PlantRecommendationInput = z.infer<typeof PlantRecommendationInputSchema>;

const PlantRecommendationOutputSchema = z.object({
  plants: z
    .string()
    .describe(
      'A list of recommended plants based on the climate, light level and preferences.'
    ),
});

export type PlantRecommendationOutput = z.infer<typeof PlantRecommendationOutputSchema>;

export async function plantRecommendation(
  input: PlantRecommendationInput
): Promise<PlantRecommendationOutput> {
  return plantRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'plantRecommendationPrompt',
  input: {schema: PlantRecommendationInputSchema},
  output: {schema: PlantRecommendationOutputSchema},
  prompt: `You are a plant expert specializing in recommending plants based on climate, light level, and user preferences.

  Based on the following information, recommend a list of plants that would be suitable for the user's home.

  Climate: {{{climate}}}
  Light Level: {{{lightLevel}}}
  Preferences: {{{preferences}}}
  Seasonal Factors: Considering the current season, recommend plants that thrive during this time of year.
  `,
});

const plantRecommendationFlow = ai.defineFlow(
  {
    name: 'plantRecommendationFlow',
    inputSchema: PlantRecommendationInputSchema,
    outputSchema: PlantRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
